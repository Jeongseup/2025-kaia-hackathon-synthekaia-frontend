// NFT Contract ABI and Address
export const STKAIA_DELTA_NEUTRAL_VAULT_ADDRESS =
  process.env.NEXT_PUBLIC_STKAIA_DELTA_NEUTRAL_VAULT_ADDRESS || "";
// StkaiaDeltaNeutralVault ABI
export const STKAIA_DELTA_NEUTRAL_VAULT_ABI = [
  "constructor() nonpayable",
  "function allowance(address owner, address spender) view returns (uint256)",
  "function approve(address spender, uint256 value) nonpayable returns (bool)",
  "function asset() view returns (address)",
  "function balanceOf(address account) view returns (uint256)",
  "function convertToAssets(uint256 shares) view returns (uint256)",
  "function convertToShares(uint256 assets) view returns (uint256)",
  "function decimals() view returns (uint8)",
  "function deposit(uint256 assets, address receiver) nonpayable returns (uint256 shares)",
  "function initialize(address _asset, address _stKAIA, address _uniswapRouter, address _perpDex, address _initialOwner) nonpayable",
  "function leverage() view returns (uint256)",
  "function maxDeposit(address ) view returns (uint256)",
  "function maxMint(address ) view returns (uint256)",
  "function maxRedeem(address owner) view returns (uint256)",
  "function maxWithdraw(address owner) view returns (uint256)",
  "function mint(uint256 shares, address receiver) nonpayable returns (uint256)",
  "function name() view returns (string)",
  "function owner() view returns (address)",
  "function paused() view returns (bool)",
  "function perpDex() view returns (address)",
  "function perpDexTokenType() view returns (uint8)",
  "function previewDeposit(uint256 assets) view returns (uint256)",
  "function previewMint(uint256 shares) view returns (uint256)",
  "function previewRedeem(uint256 shares) view returns (uint256)",
  "function previewWithdraw(uint256 assets) view returns (uint256)",
  "function redeem(uint256 shares, address receiver, address owner) nonpayable returns (uint256)",
  "function renounceOwnership() nonpayable",
  "function stKAIA() view returns (address)",
  "function swapFee() view returns (uint24)",
  "function symbol() view returns (string)",
  "function totalAssets() view returns (uint256)",
  "function totalSupply() view returns (uint256)",
  "function transfer(address to, uint256 value) nonpayable returns (bool)",
  "function transferFrom(address from, address to, uint256 value) nonpayable returns (bool)",
  "function transferOwnership(address newOwner) nonpayable",
  "function uniswapRouter() view returns (address)",
  "function withdraw(uint256 assets, address receiver, address owner) nonpayable returns (uint256)",
  "event Approval(address indexed owner, address indexed spender, uint256 value)",
  "event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares)",
  "event Initialized(uint64 version)",
  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
  "event Paused(address account)",
  "event StrategyExecuted(uint256 totalUsdtAmount, uint256 amountSwapped, uint256 amountShorted, uint256 stKAIAAmountReceived)",
  "event Transfer(address indexed from, address indexed to, uint256 value)",
  "event Unpaused(address account)",
  "event Withdraw(address indexed sender, address indexed receiver, address indexed owner, uint256 assets, uint256 shares)",
  "error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed)",
  "error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed)",
  "error ERC20InvalidApprover(address approver)",
  "error ERC20InvalidReceiver(address receiver)",
  "error ERC20InvalidSender(address sender)",
  "error ERC20InvalidSpender(address spender)",
  "error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max)",
  "error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max)",
  "error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max)",
  "error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max)",
  "error EnforcedPause()",
  "error ExpectedPause()",
  "error InvalidInitialization()",
  "error NotInitializing()",
  "error OwnableInvalidOwner(address owner)",
  "error OwnableUnauthorizedAccount(address account)",
  "error ReentrancyGuardReentrantCall()",
  "error SafeERC20FailedOperation(address token)",
] as const;
